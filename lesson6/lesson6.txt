
lesson6 関数の定義

複数の処理をまとめて整理したものを一般に関数という。
print()なども関数の一つ。関数は独自に作成し、プログラムを見やすくすることができる。
また、.pyファイルはimportで呼び出せるため、沢山の関数を.pyにまとめ、そういったものをimportするだけの.pyファイルをまとめ、これをimportする…
という手順を踏むことで大量の関数を圧縮して呼び出しできる。

lesson6_1
・まずは実行
→次に、内容を確認。
	def hello():
	節を作成している。
	hello()はdef hello():節の中身を呼び出している。
		※defはdeffinite(定義する)の頭三文字
		ここではhello()という処理を定義している。
	→hello()関数を定義している

課題:
	hiho()関数を定義し、実行してください。
	hiho()関数は呼び出すと標準出力に「お仕事大好き♪」と表示する関数とします。
	
lesson6_2
・最初にコードを読む
	greet(name)関数が定義されている。
	greet("さくら")という形で呼び出されている。
	add(a,b)関数が定義されている。
	add(3,5)という形で呼び出されているが…?
	
・次に実行し、結果を確認する。
	「こんにちは、さくらさん」
	「合計は8」
	と表示されていることを確認。

・解説
	greet(name)
		関数は呼び出すときに値を渡して動かすことができる。この値のことを引数(ひきすう)と呼ぶ。
		greet(name)関数は文字列nameを渡し、「こんにちは、nameさん」と出力する関数。
			※greetは挨拶という意味ですよ!
		greet(name)関数自体はどんな値が渡されるか気にせず、nameという文字列か渡されるものとして内部処理を書いている。
		*引数は、渡される値の型を内部または外部で検証した方が安全。
			内部で検証:この場合、strでなければエラーを返すような仕組みがありえる。
			ただし、エラー処理についてまだ学習していないので、またまとめます。
	add(a,b)
		関数は特定の値を返すように設定することができる。この値のことを戻り値(もどりち)と呼ぶ。
		y=2x+１という関数に、x=2を引数として渡すと、戻り値として5が得られるイメージ。
		hell0()やgreet(name)は圧縮した処理をその場で実行するだけ(関数呼び出し)だったが、
		add(a,b)は呼び出して返してきた値を処理に組み込んでいる(resultという値に直接代入している)
		add(a,b)を直接見ると…
			引数としてa,bの2つの数を得ている(複数の引数を要求する関数では、このようにカンマでつないで表記する。)
			return句のあとにa+bという処理を書いているが…
				return句は、直後の式の結果を戻り値として呼び出し元に返す句
				よって、a+bの結果を呼び出し元に返している。

課題:hiho(num)関数を定義し、実行してください。
	hiho(num)関数は
		引数1で呼び出すと標準出力に「お仕事大好き♪」と表示し、
		引数2で呼び出すと標準出力に「推し事大好き♪」と表示する関数とします。

lesson6_3
・まずは実行。
・次にコードを読む。説明は全てソースコード内に書いています。
	import句を使ってrandomパッケージを読み込んでいます。
	random.randint(a,b)はaからbまでの間の整数を疑似乱数として得る定義済み関数です。
	Thac0(タコ)はwizardry独特の表現なのでちょっと難しいですが。
	要するに、"命中難易度"15の戦士が、アーマークラス5の敵に、3回攻撃した時のダメージを算出しています。
	戦士の攻撃での一回命中当たりのダメージは、5～12として定義されています。
	結果として0から36のダメージが出力されます。
	(独特…!!!)

課題:RPGにおけるダメージ出力の処理を記述してください。ダメージの出力過程は自由です。
	ただし、「攻撃の成功/失敗はランダムで決定」「ダメージはある程度の乱数を含む」ものとして、
	「攻撃の成否チェック」処理と「ダメージ算出」処理は関数として定義し、
	これを呼び出す形で処理を進めてください。
		※何も思いつかない人のために・・・
		攻撃は90%の確率で命中するものとする。
		ダメージは1800+(0～200)の値が出力されるものとする
		攻撃が失敗すれば「Miss!」、成功すれば「〇〇点のダメージ!」と表示されるものとする
		この仕様で作成してみてください。
	
	
		
	